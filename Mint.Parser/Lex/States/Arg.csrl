%%{
# newline significant, +/- is an operator. can label.

machine Lexer;

include "definitions.csrl";

main := |*

    nl ws* ('&.' | '.' ^'.') => {
        fexec te - 2;
    };

    nl => {
        Lexer.EmitToken(kNL, ts, te);
        Lexer.CurrentState = Lexer.BegState;
        Lexer.CommandStart = true;
        fbreak;
    };

    esc_ws_nl+ %TokStart heredoc_identifier => {
        Lexer.EmitHeredocToken(tokStart, te);
        fbreak;
    };

    esc_ws_nl+ '%' [Qqxr] percent_string_delimiter => {
        Lexer.EmitStringToken(te - 3, te);
        fbreak;
    };

    esc_ws_nl+ '%s' percent_string_delimiter => {
        Lexer.EmitStringToken(te - 3, te);
        Lexer.CurrentState = Lexer.FnameFitemState;
        fbreak;
    };

    esc_ws_nl+ %TokStart '%' [WwIi] percent_string_delimiter ws_nl* => {
        Lexer.EmitStringToken(tokStart, tokStart + 3);
        fbreak;
    };

    esc_ws_nl+ '%' (percent_string_delimiter - ws_nl - '=') => {
        Lexer.EmitStringToken(te - 2, te);
        fbreak;
    };

    esc_ws_nl+ '%' [QqWwIixrs]? c_eof => {
        throw new SyntaxError(Lexer.Filename, Lexer.LineAt(ts), "unterminated quoted string meets end of file");
    };

    esc_ws_nl+ '%' [QqWwIixrs]? (unicode | alnum) => {
        throw new SyntaxError(Lexer.Filename, Lexer.LineAt(ts), "unknown type of %string");
    };

    any => CallBaseState;

*|;

}%%
#pragma warning disable 162

using static Mint.Parse.TokenType;

namespace Mint.Lex.States
{
    internal partial class Arg
    {
        public override void Advance()
        {
            Reset(%%{ write start; }%%);

            %% write exec noend;
        }

        %% write data nofinal noerror;
    }
}