%%{
# newline significant, +/- is an operator. can label.

machine Lexer;

include "definitions.csrl";

EXPR_ARG := |*

    nl ws* ('&.' | '.' ^'.') => {
        fexec te - 2;
    };

    nl => {
        Lexer.EmitToken(kNL, ts, te);
        Lexer.CurrentState = Lexer.BegState;
        Lexer.CommandStart = true;
        fbreak;
    };

    esc_ws_nl+ '**' ^(ws_nl | '=') => {
        Lexer.EmitToken(kDSTAR, te - 3, te - 1);
        Lexer.CurrentState = Lexer.BegState;
        fhold;
        fbreak;
    };

    esc_ws_nl+ '*' ^(ws_nl | '=') => {
        Lexer.EmitToken(kSTAR, te - 2, te - 1);
        Lexer.CurrentState = Lexer.BegState;
        fhold;
        fbreak;
    };

    esc_ws_nl+ %TokStart heredoc_identifier => {
        Lexer.EmitHeredocToken(tokStart, te);
        fbreak;
    };

    [''""] => {
        Lexer.EmitLabelableStringToken(ts, te);
        fbreak;
    };

    esc_ws_nl+ '&' ^(ws_nl | [=&.]) => {
        Lexer.EmitToken(kAMPER, te - 2, te - 1);
        Lexer.CurrentState = Lexer.BegState;
        fhold;
        fbreak;
    };

    esc_ws_nl+ %TokStart '+' integer_number => {
        Lexer.EmitIntegerToken(tokStart, te, numBase, isRational, isImaginary);
        Lexer.CurrentState = Lexer.BegState;
        fbreak;
    };

    esc_ws_nl+ %TokStart '+' float_number => {
        Lexer.EmitFloatToken(tokStart, te, isRational, isImaginary);
        Lexer.CurrentState = Lexer.BegState;
        fbreak;
    };

    esc_ws_nl+ '+' ^(ws_nl | '=') => {
        Lexer.EmitToken(kUPLUS, te - 2, te - 1);
        Lexer.CurrentState = Lexer.BegState;
        fhold;
        fbreak;
    };

    esc_ws_nl+ '-' digit => {
        Lexer.EmitToken(kUMINUS_NUM, te - 2, te - 1);
        Lexer.CurrentState = Lexer.BegState;
        fhold;
        fbreak;
    };

    esc_ws_nl+ '-' ^(ws_nl | digit | [=>]) => {
        Lexer.EmitToken(kUMINUS, te - 2, te - 1);
        Lexer.CurrentState = Lexer.BegState;
        fhold;
        fbreak;
    };

    esc_ws_nl+ '::' => {
        Lexer.EmitToken(kCOLON3, te - 2, te);
        Lexer.CurrentState = Lexer.BegState;
        fbreak;
    };

    esc_ws_nl+ '/' ^(ws_nl | '=') => {
        Lexer.EmitStringToken(te - 2, te - 1);
        fhold;
        fbreak;
    };

    esc_ws_nl+ '(' => {
        Lexer.EmitToken(kLPAREN_ARG, te - 1, te);
        Lexer.CurrentState = Lexer.BegState;
        Lexer.CanLabel = true;
        Lexer.ParenNest++;
        Lexer.Cond.Push(false);
        Lexer.Cmdarg.Push(false);
        fbreak;
    };

    esc_ws_nl+ '[' => {
        Lexer.EmitToken(kLBRACK, te - 1, te);
        Lexer.CurrentState = Lexer.BegState;
        Lexer.CanLabel = true;
        Lexer.ParenNest++;
        Lexer.Cond.Push(false);
        Lexer.Cmdarg.Push(false);
        fbreak;
    };

    '{' => {
        Lexer.CurrentState = Lexer.BegState;
        TokenType tokenType;
        if(Lexer.LeftParenCounter > 0 && Lexer.LeftParenCounter == Lexer.ParenNest)
        {
            tokenType = kLAMBEG;
            Lexer.LeftParenCounter = 0;
            Lexer.ParenNest--;
        }
        else
        {
            tokenType = kLBRACE2;
            Lexer.CanLabel = true;
            Lexer.CommandStart = true;
        }
        Lexer.EmitToken(tokenType, ts, te);
        Lexer.IncrementBraceCount();
        Lexer.Cond.Push(false);
        Lexer.Cmdarg.Push(false);
        fbreak;
    };

    esc_ws_nl+ '%' [Qqxr] (ascii - alnum) => {
        Lexer.EmitStringToken(te - 3, te);
        fbreak;
    };

    esc_ws_nl+ '%s' (ascii - alnum) => {
        Lexer.EmitStringToken(te - 3, te);
        Lexer.CurrentState = Lexer.FnameFitemState;
        fbreak;
    };

    esc_ws_nl+ %TokStart '%' [WwIi] (ascii - alnum) ws_nl* => {
        Lexer.EmitStringToken(tokStart, tokStart + 3);
        fbreak;
    };

    esc_ws_nl+ '%' (ascii - alnum - ws_nl - '=') => {
        Lexer.EmitStringToken(te - 2, te);
        fbreak;
    };

    esc_ws_nl+ '%' [QqWwIixrs]? c_eof => {
        var line = Lexer.LocationFor(ts, 0).StartLine;
        throw new SyntaxError(Lexer.Filename, line, "unterminated quoted string meets end of file");
    };

    esc_ws_nl+ '%' [QqWwIixrs]? (unicode | alnum) => {
        var line = Lexer.LocationFor(ts, 0).StartLine;
        throw new SyntaxError(Lexer.Filename, line, "unknown type of %string");
    };

    '?' ws_nl => {
        Lexer.EmitToken(kQMARK, ts, te - 1);
        Lexer.CurrentState = Lexer.BegState;
        fhold;
        fbreak;
    };

    name [!?]? ':' ^':' => {
        Lexer.EmitToken(tLABEL, ts, te - 1);
        Lexer.CurrentState = Lexer.ArgLabeledState;
        fhold;
        fbreak;
    };

    (name [!?] - reserved) ^'=' => {
        Lexer.EmitToken(tFID, ts, te - 1);
        Lexer.CurrentState = commandStart ? Lexer.CmdargState : Lexer.ArgState;
        fhold;
        fbreak;
    };

    identifier - reserved => {
        var token = Lexer.EmitToken(tIDENTIFIER, ts, te);
        var isLocalVar = Lexer.IsVariableDefined(token.Value);
        if(isLocalVar)
        {
            Lexer.CurrentState = Lexer.EndState;
            Lexer.CanLabel = true;
        }
        else
        {
            Lexer.CurrentState = commandStart ? Lexer.CmdargState : Lexer.ArgState;
        }
        fbreak;
    };

    'do' => {
        var tokenType = kDO;

        if(Lexer.LeftParenCounter > 0 && Lexer.LeftParenCounter == Lexer.ParenNest)
        {
            Lexer.LeftParenCounter = 0;
            Lexer.ParenNest--;
            tokenType = kDO_LAMBDA;
        }
        else if(Lexer.Cond.Peek)
        {
            tokenType = kDO_COND;
        }
        else if(Lexer.Cmdarg.Peek)
        {
            tokenType = kDO_BLOCK;
        }

        Lexer.EmitToken(tokenType, ts, te);
        Lexer.CurrentState = Lexer.BegState;
        Lexer.CommandStart = true;
        fbreak;
    };

    any => CallSharedState;

*|;

}%%
#pragma warning disable 162

using Mint.Parse;
using static Mint.Parse.TokenType;

namespace Mint.Lex.States
{
    internal class Arg : StateBase
    {
        public Arg(Lexer lexer) : base(lexer)
        { }

        public override void Advance(State caller)
        {
            Reset(%%{ write start; }%%);

            %% write exec noend;
        }

        %% write data nofinal noerror;
    }
}