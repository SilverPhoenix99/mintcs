%%{
# ignore newline, +/- is a sign. can label.

machine Lexer;

include "definitions.csrl";

main := |*

    heredoc_identifier => {
        Lexer.EmitHeredocToken(ts, te);
        fbreak;
    };

    '+' integer_number => {
        Lexer.EmitIntegerToken(ts, te, numBase, isRational, isImaginary);
        Lexer.CurrentState = Lexer.BegState;
        fbreak;
    };

    '+' float_number => {
        Lexer.EmitFloatToken(ts, te, isRational, isImaginary);
        Lexer.CurrentState = Lexer.BegState;
        fbreak;
    };

    '-' digit => {
        Lexer.EmitToken(kUMINUS_NUM, ts, te - 1);
        Lexer.CurrentState = Lexer.BegState;
        fhold;
        fbreak;
    };

    '-' ^(ws_nl | [=>]) => {
        Lexer.EmitToken(kUMINUS, ts, te - 1);
        Lexer.CurrentState = Lexer.BegState;
        fhold;
        fbreak;
    };

    '::' => {
        Lexer.EmitToken(kCOLON3, ts, te);
        Lexer.CurrentState = Lexer.BegState;
        fbreak;
    };

    '%' [Qqxr] (ascii - alnum) => {
        Lexer.EmitStringToken(ts, te);
        fbreak;
    };

    '%s' (ascii - alnum) => {
        Lexer.EmitStringToken(ts, te);
        Lexer.CurrentState = Lexer.FnameFitemState;
        fbreak;
    };

    '%' [WwIi] (ascii - alnum) ws_nl* => {
        Lexer.EmitStringToken(ts, ts + 3);
        fbreak;
    };

    '%' (ascii - alnum) => {
        Lexer.EmitStringToken(ts, te);
        fbreak;
    };

    '%' [QqWwIixrs]? c_eof => {
        throw new SyntaxError(Lexer.Filename, Lexer.LineAt(ts), "unterminated quoted string meets end of file");
    };

    '%' [QqWwIixrs]? (unicode | alnum) => {
        throw new SyntaxError(Lexer.Filename, Lexer.LineAt(ts), "unknown type of %string");
    };

    any => CallBaseState;

*|;

}%%
#pragma warning disable 162

using static Mint.Parse.TokenType;

namespace Mint.Lex.States
{
    internal partial class Beg
    {
        public override void Advance()
        {
            Reset(%%{ write start; }%%);

            %% write exec noend;
        }

        %% write data nofinal noerror;
    }
}