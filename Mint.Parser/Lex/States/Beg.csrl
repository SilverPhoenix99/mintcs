%%{
# ignore newline, +/- is a sign.

machine Lexer;

include "definitions.csrl";

EXPR_BEG := |*

    nl;

    '**' ^'=' => {
        Lexer.EmitToken(kDSTAR, ts, te - 1);
        Lexer.CurrentState = Lexer.BegState;
        fhold;
        return null;
    };

    '*' ^'=' => {
        Lexer.EmitToken(kSTAR, ts, te - 1);
        Lexer.CurrentState = Lexer.BegState;
        fhold;
        return null;
    };

    '!@' => {
        Lexer.EmitToken(kNOTOP, ts, te);
        Lexer.CurrentState = Lexer.BegState;
        return null;
    };

    '!=' => {
        Lexer.EmitToken(kNEQ, ts, te);
        Lexer.CurrentState = Lexer.BegState;
        return null;
    };

    '!~' => {
        Lexer.EmitToken(kNMATCH, ts, te);
        Lexer.CurrentState = Lexer.BegState;
        return null;
    };

    '!' => {
        Lexer.EmitToken(kNOTOP, ts, te);
        Lexer.CurrentState = Lexer.BegState;
        return null;
    };

    '===' => {
        Lexer.EmitToken(kEQQ, ts, te);
        Lexer.CurrentState = Lexer.BegState;
        return null;
    };

    '==' => {
        Lexer.EmitToken(kEQ, ts, te);
        Lexer.CurrentState = Lexer.BegState;
        return null;
    };

    '=~' => {
        Lexer.EmitToken(kMATCH, ts, te);
        Lexer.CurrentState = Lexer.BegState;
        return null;
    };

    '=>' => {
        Lexer.EmitToken(kASSOC, ts, te);
        Lexer.CurrentState = Lexer.BegState;
        return null;
    };

    '=' => {
        Lexer.EmitToken(kASSIGN, ts, te);
        Lexer.CurrentState = Lexer.BegState;
        return null;
    };

    heredoc_identifier => {
        Lexer.EmitHeredocToken(ts, te);
        return null;
    };

    '<=>' => {
        Lexer.EmitToken(kCMP, ts, te);
        Lexer.CurrentState = Lexer.BegState;
        return null;
    };

    '<=' => {
        Lexer.EmitToken(kLEQ, ts, te);
        Lexer.CurrentState = Lexer.BegState;
        return null;
    };

    '<<' ^'=' => {
        Lexer.EmitToken(kLSHIFT, ts, te - 1);
        Lexer.CurrentState = Lexer.BegState;
        fhold;
        return null;
    };

    '<' => {
        Lexer.EmitToken(kLESS, ts, te);
        Lexer.CurrentState = Lexer.BegState;
        return null;
    };

    '>=' => {
        Lexer.EmitToken(kGEQ, ts, te);
        Lexer.CurrentState = Lexer.BegState;
        return null;
    };

    '>>' ^'=' => {
        Lexer.EmitToken(kRSHIFT, ts, te - 1);
        Lexer.CurrentState = Lexer.BegState;
        fhold;
        return null;
    };

    '>' => {
        Lexer.EmitToken(kGREATER, ts, te);
        Lexer.CurrentState = Lexer.BegState;
        return null;
    };

    [''""] => {
        Lexer.EmitStringToken(ts, te);
        return null;
    };

    '`' => {
        Lexer.EmitStringToken(ts, te);
        return null;
    };

    any => {
        fhold;
        return Lexer.SharedState.Advance(this);
    };

*|;

}%%
#pragma warning disable 162

using static Mint.Parse.TokenType;

namespace Mint.Lex.States
{
    internal class Beg : StateBase
    {
        public Beg(Lexer lexer) : base(lexer)
        { }

        public override State Advance()
        {
            var ts = -1;
			var te = -1;
			var act = 0;
			var cs = Lexer_start;
			var pe = Lexer.Length;
			var eof = pe;
            var tokStart = -1;
            var tokEnd = -1;
            var commandStart = Lexer.CommandStart;

            %% write exec;

            return null;
        }

        %% write data;
    }
}