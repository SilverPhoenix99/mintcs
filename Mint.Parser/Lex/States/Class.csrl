%%{
# immediate after `class', no here document.

machine Lexer;

include "definitions.csrl";

EXPR_CLASS := |*

    '<=>' => {
        Lexer.EmitToken(kCMP, ts, te);
        Lexer.CurrentState = Lexer.BegState;
        Lexer.CommandStart = true;
        fbreak;
    };

    '<=' => {
        Lexer.EmitToken(kLEQ, ts, te);
        Lexer.CurrentState = Lexer.BegState;
        Lexer.CommandStart = true;
        fbreak;
    };

    '<<' ^'=' => {
        Lexer.EmitToken(kLSHIFT, ts, te - 1);
        Lexer.CurrentState = Lexer.BegState;
        Lexer.CommandStart = true;
        fhold;
        fbreak;
    };

    '<' => {
        Lexer.EmitToken(kLESS, ts, te);
        Lexer.CurrentState = Lexer.BegState;
        Lexer.CommandStart = true;
        fbreak;
    };

    '+' integer_number => {
        Lexer.EmitIntegerToken(ts, te, numBase, isRational, isImaginary);
        Lexer.CurrentState = Lexer.BegState;
        fbreak;
    };

    '+' float_number => {
        Lexer.EmitFloatToken(ts, te, isRational, isImaginary);
        Lexer.CurrentState = Lexer.BegState;
        fbreak;
    };

    '-' digit => {
        Lexer.EmitToken(kUMINUS_NUM, ts, te - 1);
        Lexer.CurrentState = Lexer.BegState;
        fhold;
        fbreak;
    };

    '-' ^(ws_nl | [=>]) => {
        Lexer.EmitToken(kUMINUS, ts, te - 1);
        Lexer.CurrentState = Lexer.BegState;
        fhold;
        fbreak;
    };

    '::' => {
        Lexer.EmitToken(kCOLON3, ts, te);
        Lexer.CurrentState = Lexer.BegState;
        fbreak;
    };

    '%' [Qqxr] (ascii - alnum) => {
        Lexer.EmitStringToken(ts, te);
        fbreak;
    };

    '%s' (ascii - alnum) => {
        Lexer.EmitStringToken(ts, te);
        Lexer.CurrentState = Lexer.FnameFitemState;
        fbreak;
    };

    '%' [WwIi] (ascii - alnum) ws_nl* => {
        Lexer.EmitStringToken(ts, ts + 3);
        fbreak;
    };

    '%' (ascii - alnum) => {
        Lexer.EmitStringToken(ts, te);
        fbreak;
    };

    '%' [QqWwIixrs]? c_eof => {
        throw new SyntaxError(Lexer.Filename, Lexer.LineAt(ts), "unterminated quoted string meets end of file");
    };

    '%' [QqWwIixrs]? (unicode | alnum) => {
        throw new SyntaxError(Lexer.Filename, Lexer.LineAt(ts), "unknown type of %string");
    };

    any => CallBaseState;

*|;

}%%
#pragma warning disable 162

using Mint.Parse;
using static Mint.Parse.TokenType;

namespace Mint.Lex.States
{
    internal class Class : Shared
    {
        protected override TokenType DoubleStarTokenType => kDSTAR;
        protected override TokenType StarTokenType => kSTAR;
        protected override TokenType AmpersandTokenType => kAMPER;
        protected override TokenType PlusTokenType => kUPLUS;
        protected override TokenType LeftBracketTokenType => kLBRACK;
        protected override TokenType LeftParenTokenType => kLPAREN;

        public Class(Lexer lexer) : base(lexer)
        { }

        protected override void EmitIdentifierToken()
        {
            var token = Lexer.EmitToken(tIDENTIFIER, ts, te);
            var isLocalVar = Lexer.IsVariableDefined(token.Value);
            if(isLocalVar)
            {
                Lexer.CurrentState = Lexer.EndState;
                Lexer.CanLabel = true;
            }
            else
            {
                Lexer.CurrentState = Lexer.CommandStart ? Lexer.CmdargState : Lexer.ArgState;
            }
        }

        protected override void EmitFidToken()
        {
            Lexer.EmitToken(tFID, ts, te - 1);
            Lexer.CurrentState = Lexer.CommandStart ? Lexer.CmdargState : Lexer.ArgState;
        }

        protected override void EmitDoToken()
        {
            var tokenType = kDO;

            if(Lexer.LeftParenCounter > 0 && Lexer.LeftParenCounter == Lexer.ParenNest)
            {
                Lexer.LeftParenCounter = 0;
                Lexer.ParenNest--;
                tokenType = kDO_LAMBDA;
            }
            else if(Lexer.Cond.Peek)
            {
                tokenType = kDO_COND;
            }
            else if(Lexer.Cmdarg.Peek)
            {
                tokenType = kDO_BLOCK;
            }

            Lexer.EmitToken(tokenType, ts, te);
            Lexer.CurrentState = Lexer.BegState;
            Lexer.CommandStart = true;
        }

        protected override void EmitDivToken()
        {
            Lexer.EmitStringToken(ts, te);
        }

        public override void Advance()
        {
            Reset(%%{ write start; }%%);

            %% write exec noend;
        }

        %% write data nofinal noerror;
    }
}