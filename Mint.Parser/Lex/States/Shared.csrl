%%{
# Expressions shared by all other states

machine Lexer;

include "definitions.csrl";


### Embedded documentation

action EmbeddedDocEof
{
    throw new SyntaxError(Lexer.Filename, Lexer.LineAt(ts), "embedded document meets end of file");
}

embedded_doc =
    '=begin' (ws ^nl*)? nl
    (
        (any* nl)*
        :>>
        '=end' (ws ^nl_eof*)? nl_eof
    ) @err(EmbeddedDocEof)
;


reserved =
      'alias'
    | 'and'
    | 'begin'
    | 'BEGIN'
    | 'break'
    | 'case'
    | 'class'
    | 'def'
    | 'defined?'
    | 'do'
    | 'else'
    | 'elsif'
    | 'end'
    | 'END'
    | 'ensure'
    | 'false'
    | 'for'
    | 'if'
    | 'in'
    | 'module'
    | 'next'
    | 'nil'
    | 'not'
    | 'or'
    | 'redo'
    | 'rescue'
    | 'retry'
    | 'return'
    | 'self'
    | 'super'
    | 'then'
    | 'true'
    | 'undef'
    | 'unless'
    | 'until'
    | 'when'
    | 'while'
    | 'yield'
    | '__ENCODING__'
    | '__FILE__'
    | '__LINE__'
;


main := |*

	c_eof => { fbreak; };

    esc_ws+ => {
        Lexer.Retry = true;
        fbreak;
    };

    nl => {
        Lexer.Retry = true;
        fbreak;
    };

    comment => {
        Lexer.Retry = true;
        fbreak;
    };

    embedded_doc => {
        Lexer.Retry = true;
        fhold;
        fbreak;
    };

      '**='
    | '*='
    | '<<='
    | '>>='
    | '&&='
    | '&='
    | '||='
    | '|='
    | '+='
    | '-='
    | '/='
    | '^='
    | '%='
    => {
        Lexer.EmitToken(tOP_ASGN, ts, te - 1);
        Lexer.CurrentState = Lexer.BegState;
        fbreak;
    };

    '**' => {
        Lexer.EmitToken(DoubleStarTokenType, ts, te);
        Lexer.CurrentState = OperatorState;
        fbreak;
    };

    '*' => {
        Lexer.EmitToken(StarTokenType, ts, te);
        Lexer.CurrentState = OperatorState;
        fbreak;
    };

    '!=' => {
        Lexer.EmitToken(kNEQ, ts, te);
        Lexer.CurrentState = OperatorState;
        fbreak;
    };

    '!~' => {
        Lexer.EmitToken(kNMATCH, ts, te);
        Lexer.CurrentState = OperatorState;
        fbreak;
    };

    '!' => {
        Lexer.EmitToken(kNOTOP, ts, te);
        Lexer.CurrentState = OperatorState;
        fbreak;
    };

    '===' => {
        Lexer.EmitToken(kEQQ, ts, te);
        Lexer.CurrentState = OperatorState;
        fbreak;
    };

    '==' => {
        Lexer.EmitToken(kEQ, ts, te);
        Lexer.CurrentState = OperatorState;
        fbreak;
    };

    '=~' => {
        Lexer.EmitToken(kMATCH, ts, te);
        Lexer.CurrentState = OperatorState;
        fbreak;
    };

    '=>' => {
        Lexer.EmitToken(kASSOC, ts, te);
        Lexer.CurrentState = OperatorState;
        fbreak;
    };

    '=' => {
        Lexer.EmitToken(kASSIGN, ts, te);
        Lexer.CurrentState = OperatorState;
        fbreak;
    };

    '<=>' => {
        Lexer.EmitToken(kCMP, ts, te);
        Lexer.CurrentState = OperatorState;
        fbreak;
    };

    '<=' => {
        Lexer.EmitToken(kLEQ, ts, te);
        Lexer.CurrentState = OperatorState;
        fbreak;
    };

    '<<' => {
        Lexer.EmitToken(kLSHIFT, ts, te);
        Lexer.CurrentState = OperatorState;
        fbreak;
    };

    '<' => {
        Lexer.EmitToken(kLESS, ts, te);
        Lexer.CurrentState = OperatorState;
        fbreak;
    };

    '>=' => {
        Lexer.EmitToken(kGEQ, ts, te);
        Lexer.CurrentState = OperatorState;
        fbreak;
    };

    '>>' => {
        Lexer.EmitToken(kRSHIFT, ts, te);
        Lexer.CurrentState = OperatorState;
        fbreak;
    };

    '>' => {
        Lexer.EmitToken(kGREATER, ts, te);
        Lexer.CurrentState = OperatorState;
        fbreak;
    };

    [''""] => {
        var canLabel = Lexer.CanLabel && !Lexer.CommandStart;
        Lexer.EmitStringBeginToken(ts, te, canLabel);
        fbreak;
    };

    '`' => {
        Lexer.EmitStringBeginToken(ts, te);
        fbreak;
    };

    '&&' => {
        Lexer.EmitToken(kANDOP, ts, te);
        Lexer.CurrentState = Lexer.BegState;
        fbreak;
    };

    '&.' => {
        Lexer.EmitToken(kANDDOT, ts, te);
        Lexer.CurrentState = Lexer.DotState;
        fbreak;
    };

    '&' => {
        Lexer.EmitToken(AmpersandTokenType, ts, te);
        Lexer.CurrentState = OperatorState;
        fbreak;
    };

    '||' => {
        Lexer.EmitToken(kOROP, ts, te);
        Lexer.CurrentState = Lexer.BegState;
        fbreak;
    };

    '|' => {
        Lexer.EmitToken(kPIPE, ts, te);
        Lexer.CurrentState = OperatorState;
        if(OperatorState == Lexer.BegState)
        {
            Lexer.CanLabel = true;
        }
        fbreak;
    };

    '+' => {
        Lexer.EmitToken(PlusTokenType, ts, te);
        Lexer.CurrentState = OperatorState;
        fbreak;
    };

    '->' => {
        Lexer.EmitToken(kLAMBDA, ts, te);
        Lexer.CurrentState = Lexer.EndfnState;
        fbreak;
    };

    '-' => {
        Lexer.EmitToken(kMINUS, ts, te);
        Lexer.CurrentState = OperatorState;
        fbreak;
    };

    '...' => {
        Lexer.EmitToken(kDOT3, ts, te);
        Lexer.CurrentState = OperatorState;
        fbreak;
    };

    '..' => {
        Lexer.EmitToken(kDOT2, ts, te);
        Lexer.CurrentState = OperatorState;
        fbreak;
    };

    '.' digit => {
        var line = Lexer.LineAt(ts);
        throw new SyntaxError(Lexer.Filename, line, "no .<digit> floating literal anymore; put 0 before dot");
    };

    '.' => {
        Lexer.EmitToken(kDOT, ts, te);
        Lexer.CurrentState = Lexer.DotState;
        fbreak;
    };

    '::' => {
        Lexer.EmitToken(kCOLON2, ts, te);
        Lexer.CurrentState = Lexer.DotState;
        fbreak;
    };

    ':' (ws_nl | '#') => {
        Lexer.EmitToken(kCOLON, ts, te - 1);
        Lexer.CurrentState = OperatorState;
        fhold;
        fbreak;
    };

    ':' [""''] => {
        Lexer.EmitStringBeginToken(ts, te);
        fbreak;
    };

    ':' => {
        Lexer.EmitToken(tSYMBEG, ts, te);
        Lexer.CurrentState = Lexer.FnameState;
        fbreak;
    };

    '/' => {
        EmitDivToken();
        fbreak;
    };

    '^' => {
        Lexer.EmitToken(kXOR, ts, te);
        Lexer.CurrentState = OperatorState;
        fbreak;
    };

    ';' => {
        Lexer.EmitToken(kSEMICOLON, ts, te);
        Lexer.CurrentState = OperatorState;
        Lexer.CommandStart = true;
        fbreak;
    };

    ',' => {
        Lexer.EmitToken(kCOLON, ts, te);
        Lexer.CurrentState = OperatorState;
        Lexer.CanLabel = true;
        fbreak;
    };

    '~' => {
        Lexer.EmitToken(kNEG, ts, te);
        Lexer.CurrentState = OperatorState;
        fbreak;
    };

    nl '__END__' nl_eof => {
        Lexer.DataLength = ts;
        Lexer.EmitToken(EOF, ts + 1, te - 1);
        fbreak;
    };

    integer_number => {
        Lexer.EmitIntegerToken(ts, te, numBase, isRational, isImaginary);
        Lexer.CurrentState = Lexer.EndState;
        fbreak;
    };

    float_number => {
        Lexer.EmitFloatToken(ts, te, isRational, isImaginary);
        Lexer.CurrentState = Lexer.EndState;
        fbreak;
    };

    '(' => {
        Lexer.EmitToken(LeftParenTokenType, ts, te);
        Lexer.CurrentState = Lexer.BegState;
        Lexer.CanLabel = true;
        Lexer.ParenNest++;
        Lexer.Cond.Push(false);
        Lexer.Cmdarg.Push(false);
        fbreak;
    };

    ')' => {
        Lexer.EmitToken(kRPAREN, ts, te);
        Lexer.CurrentState = Lexer.EndfnState;
        Lexer.ParenNest--;
        Lexer.Cond.LexPop();
        Lexer.Cmdarg.LexPop();
        fbreak;
    };

    '[' => {
        EmitLeftBracket();
        fbreak;
    };

    ']' => {
        Lexer.EmitToken(kRBRACK, ts, te);
        Lexer.CurrentState = Lexer.EndargState;
        Lexer.ParenNest--;
        Lexer.Cond.LexPop();
        Lexer.Cmdarg.LexPop();
        fbreak;
    };

    '{' => {
        EmitLeftBrace();
        fbreak;
    };

    '}' => {
        if(currentLiteral != null && --currentLiteral.BraceCount == 0)
        {
            Lexer.EmitToken(tSTRING_DEND, ts, te);
            Lexer.CurrentState = currentLiteral;
        }
        else
        {
            Lexer.EmitToken(kRBRACE, ts, te);
            Lexer.CurrentState = Lexer.EndargState;
        }
        Lexer.Cond.LexPop();
        Lexer.Cmdarg.LexPop();
        fbreak;
    };

    '@@' name => {
        Lexer.EmitToken(tCVAR, ts, te);
        Lexer.CurrentState = Lexer.EndState;
        fbreak;
    };

    '@@' (c_eof | ws_nl) => {
        throw new SyntaxError(
            Lexer.Filename,
            Lexer.LineAt(ts),
            "`@@' without identifiers is not allowed as a class variable name");
    };

    '@@' ^(c_eof | ws_nl | name_prefix) => {
        var c = Lexer.Data[ts + 2];
        throw new SyntaxError(Lexer.Filename, Lexer.LineAt(ts), $"`@@{c}' is not allowed as a class variable name");
    };

    '@' name => {
        Lexer.EmitToken(tIVAR, ts, te);
        Lexer.CurrentState = Lexer.EndState;
        fbreak;
    };

    '@' (c_eof | ws_nl) => {
        throw new SyntaxError(
            Lexer.Filename,
            Lexer.LineAt(ts),
            "`@' without identifiers is not allowed as an instance variable name");
    };

    '@' ^('@' | c_eof | ws_nl | name_prefix) => {
        var c = Lexer.Data[ts + 1];
        throw new SyntaxError(Lexer.Filename, Lexer.LineAt(ts), $"`@{c}' is not allowed as an instance variable name");
    };

    '$' (
          gvar_char
        | name
        | '0' name_char*
        | '-' name_char
    ) => {
        Lexer.EmitToken(tGVAR, ts, te);
        Lexer.CurrentState = Lexer.EndState;
        fbreak;
    };

    '$' [1-9] digit* => {
        Lexer.EmitToken(NthRefTokenType, ts, te);
        Lexer.CurrentState = Lexer.EndState;
        fbreak;
    };

    '$' back_ref_char => {
        Lexer.EmitToken(BackRefTokenType, ts, te);
        Lexer.CurrentState = Lexer.EndState;
        fbreak;
    };

    '$-' ^name_char => {
        throw new SyntaxError(Lexer.Filename, Lexer.LineAt(ts), "syntax error, unexpected $undefined");
    };

    '$' (c_eof | ws_nl) => {
        throw new SyntaxError(
            Lexer.Filename,
            Lexer.LineAt(ts),
            "`$' without identifiers is not allowed as a global variable name");
    };

    '$' ^(c_eof | ws_nl | back_ref_char | gvar_char | name_char | '-') => {
        var c = Lexer.Data[ts + 1];
        throw new SyntaxError(Lexer.Filename, Lexer.LineAt(ts), $"`${c}' is not allowed as a global variable name");
    };

    '%' => {
        Lexer.EmitToken(kPERCENT, ts, te);
        Lexer.CurrentState = OperatorState;
        fbreak;
    };

    '?' (alnum | '_') name_char => {
        Lexer.EmitToken(kQMARK, ts, te - 2);
        Lexer.CurrentState = Lexer.BegState;
        fexec ts + 1;
        fbreak;
    };

    '?' c_eof => {
        throw new SyntaxError(Lexer.Filename, Lexer.LineAt(ts), "incomplete character syntax");
    };

    '?' ws_nl => {
        var c = Lexer.Data[ts + 1];
        var index = SPACE_CHARS.IndexOf(c);
        c = PRINTABLE_SPACE_CHARS[index];
        throw new SyntaxError(Lexer.Filename, Lexer.LineAt(ts), $"invalid character syntax; use ?\\{c}");
    };

    '?'
    (
          unicode_escape
        | octal_escape
        | hex_escape
        | char_escape
        | control_escape
        | ^(c_eof | ws_nl)
    ) => {
        Lexer.EmitToken(tCHAR, ts + 1, te);
        Lexer.CurrentState = Lexer.EndState;
        fbreak;
    };

    constant - reserved => {
        EmitConstantToken();
        fbreak;
    };

    name [!?]? ':' ^':' when { CanLabel } => {
        Lexer.EmitToken(tLABEL, ts, te - 1);
        Lexer.CurrentState = Lexer.ArgLabeledState;
        fhold;
        fbreak;
    };

    (name [!?] - reserved) ^'=' => {
        EmitFidToken();
        fhold;
        fbreak;
    };

    identifier - reserved => {
        EmitIdentifierToken();
        fbreak;
    };

    '__ENCODING__' => {
        Lexer.EmitToken(k__ENCODING__, ts, te);
        Lexer.CurrentState = Lexer.EndState;
        fbreak;
    };

    '__LINE__' => {
        Lexer.EmitToken(k__LINE__, ts, te);
        Lexer.CurrentState = Lexer.EndState;
        fbreak;
    };

    '__FILE__' => {
        Lexer.EmitToken(k__FILE__, ts, te);
        Lexer.CurrentState = Lexer.EndState;
        fbreak;
    };

    'BEGIN' => {
        Lexer.EmitToken(kAPP_BEGIN, ts, te);
        Lexer.CurrentState = Lexer.EndState;
        fbreak;
    };

    'END' => {
        Lexer.EmitToken(kAPP_END, ts, te);
        Lexer.CurrentState = Lexer.EndState;
        fbreak;
    };

    'end' => {
        Lexer.EmitToken(kEND, ts, te);
        Lexer.CurrentState = Lexer.EndState;
        fbreak;
    };

    'false' => {
        Lexer.EmitToken(kFALSE, ts, te);
        Lexer.CurrentState = Lexer.EndState;
        fbreak;
    };

    'nil' => {
        Lexer.EmitToken(kNIL, ts, te);
        Lexer.CurrentState = Lexer.EndState;
        fbreak;
    };

    'redo' => {
        Lexer.EmitToken(kREDO, ts, te);
        Lexer.CurrentState = Lexer.EndState;
        fbreak;
    };

    'retry' => {
        Lexer.EmitToken(kRETRY, ts, te);
        Lexer.CurrentState = Lexer.EndState;
        fbreak;
    };

    'self' => {
        Lexer.EmitToken(kSELF, ts, te);
        Lexer.CurrentState = Lexer.EndState;
        fbreak;
    };

    'true' => {
        Lexer.EmitToken(kTRUE, ts, te);
        Lexer.CurrentState = Lexer.EndState;
        fbreak;
    };

    'def' => {
        Lexer.EmitToken(kDEF, ts, te);
        Lexer.CurrentState = Lexer.FnameState;
        fbreak;
    };

    'alias' => {
        Lexer.EmitToken(kALIAS, ts, te);
        Lexer.CurrentState = Lexer.FnameFitemState;
        fbreak;
    };

    'undef' => {
        Lexer.EmitToken(kUNDEF, ts, te);
        Lexer.CurrentState = Lexer.FnameFitemState;
        fbreak;
    };

    'break' => {
        Lexer.EmitToken(kBREAK, ts, te);
        Lexer.CurrentState = Lexer.MidState;
        fbreak;
    };

    'next' => {
        Lexer.EmitToken(kNEXT, ts, te);
        Lexer.CurrentState = Lexer.MidState;
        fbreak;
    };

    'return' => {
        Lexer.EmitToken(kRETURN, ts, te);
        Lexer.CurrentState = Lexer.MidState;
        fbreak;
    };

    'class' => {
        Lexer.EmitToken(kCLASS, ts, te);
        Lexer.CurrentState = Lexer.ClassState;
        fbreak;
    };

    'defined?' ^'=' => {
        Lexer.EmitToken(kDEFINED, ts, te - 1);
        Lexer.CurrentState = Lexer.ArgState;
        fhold;
        fbreak;
    };

    'not' => {
        Lexer.EmitToken(kNOT, ts, te);
        Lexer.CurrentState = Lexer.ArgState;
        fbreak;
    };

    'super' => {
        Lexer.EmitToken(kSUPER, ts, te);
        Lexer.CurrentState = Lexer.ArgState;
        fbreak;
    };

    'yield' => {
        Lexer.EmitToken(kYIELD, ts, te);
        Lexer.CurrentState = Lexer.ArgState;
        fbreak;
    };

    'and' => {
        EmitBegKeywordToken(kAND);
        fbreak;
    };

    'begin' => {
        EmitBegKeywordToken(kBEGIN);
        fbreak;
    };

    'case' => {
        EmitBegKeywordToken(kCASE);
        fbreak;
    };

    'else' => {
        EmitBegKeywordToken(kELSE);
        fbreak;
    };

    'elsif' => {
        EmitBegKeywordToken(kELSIF);
        fbreak;
    };

    'ensure' => {
        EmitBegKeywordToken(kENSURE);
        fbreak;
    };

    'for' => {
        EmitBegKeywordToken(kFOR);
        fbreak;
    };

    'in' => {
        EmitBegKeywordToken(kIN);
        fbreak;
    };

    'module' => {
        EmitBegKeywordToken(kMODULE);
        fbreak;
    };

    'or' => {
        EmitBegKeywordToken(kOR);
        fbreak;
    };

    'then' => {
        EmitBegKeywordToken(kTHEN);
        fbreak;
    };

    'when' => {
        EmitBegKeywordToken(kWHEN);
        fbreak;
    };

    'if' => {
        EmitModifierKeywordToken(IfTokenType);
        fbreak;
    };

    'unless' => {
        EmitModifierKeywordToken(UnlessTokenType);
        fbreak;
    };

    'until' => {
        EmitModifierKeywordToken(UntilTokenType);
        fbreak;
    };

    'while' => {
        EmitModifierKeywordToken(WhileTokenType);
        fbreak;
    };

    'rescue' => {
        EmitRescueToken();
        fbreak;
    };

    'do' => {
        EmitDoToken();
        fbreak;
    };

    any => {
        var c = Lexer.Data[ts];
        throw new SyntaxError(Lexer.Filename, Lexer.LineAt(ts), $"Invalid char `{c}' in expression");
    };

*|;

}%%
#pragma warning disable 162

using static Mint.Parse.TokenType;

namespace Mint.Lex.States
{
    internal abstract partial class Shared
    {
        public override void Advance()
        {
            Reset(%%{ write start; }%%);

            %% write exec noend;
        }

        %% write data nofinal noerror;
    }
}