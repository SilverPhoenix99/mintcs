%%{

# Character classes are in lowercase. e.g.: eof
# Machines/scanners are in uppercase. e.g.: EXPR_BEG
# Actions are in CamelCase. e.g.: DoEof

machine Lexer;

getkey Lexer.CurrentChar;
variable p Lexer.Position;
alphtype uint;

### Actions


action LineJump
{
    // LineJump
    if(Lexer.LineJump > Lexer.Position)
    {
        fexec te = Lexer.LineJump;
        ts = Lexer.Position;
    }
}

action TokStart
{
    // TokStart
    tokStart = Lexer.Position;
}

action TokEnd
{
    // TokEnd
    tokEnd = Lexer.Position;
}

action UnterminatedHeredocIdentifier
{
    throw new SyntaxError(Lexer.Filename, Lexer.CurrentLine, "unterminated here document identifier");
}


### Definitions

c_eof = 0;
nl = '\n' @LineJump;
nl_eof = nl | c_eof;
ws = space - nl;
ws_nl = ws | nl;
unicode = ^ascii;
ident_char = alnum | '_' | unicode;

heredoc_identifier = '<<' [~\-]? (
    ident_char+
  | '"' ^('"' | nl_eof)* '"' @lerr(UnterminatedHeredocIdentifier)
  | "'" ^("'" | nl_eof)* "'" @lerr(UnterminatedHeredocIdentifier)
  | '`' ^('`' | nl_eof)* '`' @lerr(UnterminatedHeredocIdentifier)
);

}%%