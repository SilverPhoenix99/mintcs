%%{
# right after `.' or `::', no reserved words.

machine Lexer;

include "definitions.csrl";

EXPR_DOT := |*

    '!@' => {
        Lexer.EmitToken(kNOTOP, ts, te);
        Lexer.CurrentState = Lexer.ArgState;
        fbreak;
    };

    '`' => {
        Lexer.EmitToken(kBACKTICK, ts, te);
        Lexer.CurrentState = Lexer.CommandStart ? Lexer.CmdargState : Lexer.ArgState;
        fbreak;
    };

    '&' ^[=&.] => {
        Lexer.EmitToken(kAMPER, ts, te - 1);
        Lexer.CurrentState = Lexer.ArgState;
        fhold;
        fbreak;
    };

    '|' ^[=|] => {
        Lexer.EmitToken(kPIPE, ts, te - 1);
        Lexer.CurrentState = Lexer.ArgState;
        fhold;
        fbreak;
    };

    '+@' => {
        Lexer.EmitToken(kUPLUS, ts, te);
        Lexer.CurrentState = Lexer.ArgState;
        fbreak;
    };

    '-@' => {
        Lexer.EmitToken(kUMINUS, ts, te);
        Lexer.CurrentState = Lexer.ArgState;
        fbreak;
    };

    '~' '@'? => {
        Lexer.EmitToken(kNEG, ts, te);
        Lexer.CurrentState = Lexer.ArgState;
        fbreak;
    };

    '[]=' => {
        Lexer.EmitToken(kASET, ts, te);
        Lexer.CurrentState = Lexer.ArgState;
        fbreak;
    };

    '[]' => {
        Lexer.EmitToken(kAREF, ts, te);
        Lexer.CurrentState = Lexer.ArgState;
        fbreak;
    };

    '[' => {
        Lexer.EmitToken(kLBRACK2, ts, te);
        Lexer.CurrentState = Lexer.ArgState;
        Lexer.CanLabel = true;
        Lexer.ParenNest++;
        fbreak;
    };

    '%' ^'=' => {
        Lexer.EmitToken(kPERCENT, ts, te - 1);
        Lexer.CurrentState = Lexer.BegState;
        fhold;
        fbreak;
    };

    name [!?] ^'=' => {
        EmitFidToken(ts, te - 1);
        fhold;
        fbreak;
    };

    constant => {
        Lexer.EmitToken(tCONSTANT, ts, te);
        Lexer.CurrentState = Lexer.CommandStart ? Lexer.CmdargState : Lexer.ArgState;
        fbreak;
    };

    identifier => {
        EmitIdentifierToken(ts, te);
        fbreak;
    };

    any => CallSharedState;

*|;

}%%
#pragma warning disable 162

using Mint.Parse;
using static Mint.Parse.TokenType;

namespace Mint.Lex.States
{
    internal class Dot : StateBase
    {
        public override State OperatorState => Lexer.ArgState;

        protected override int InitialState => %%{ write start; }%%;

        public Dot(Lexer lexer) : base(lexer)
        { }

        public override void EmitIdentifierToken(int ts, int te)
        {
            Lexer.EmitToken(tIDENTIFIER, ts, te);
            Lexer.CurrentState = Lexer.CommandStart ? Lexer.CmdargState : Lexer.ArgState;
        }

        public override void EmitFidToken(int ts, int te)
        {
            Lexer.EmitToken(tFID, ts, te);
            Lexer.CurrentState = Lexer.CommandStart ? Lexer.CmdargState : Lexer.ArgState;
        }

        protected override void InternalAdvance()
        {
            %% write exec noend;
        }

        %% write data nofinal noerror;
    }
}