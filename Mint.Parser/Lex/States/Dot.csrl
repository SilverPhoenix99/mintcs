%%{
# right after `.' or `::', no reserved words.

machine Lexer;

include "definitions.csrl";

EXPR_DOT := |*

    '!@' => {
        Lexer.EmitToken(kNOTOP, ts, te);
        Lexer.CurrentState = Lexer.ArgState;
        fbreak;
    };

    '`' => {
        Lexer.EmitToken(kBACKTICK, ts, te);
        Lexer.CurrentState = Lexer.CommandStart ? Lexer.CmdargState : Lexer.ArgState;
        fbreak;
    };

    '+@' => {
        Lexer.EmitToken(kUPLUS, ts, te);
        Lexer.CurrentState = Lexer.ArgState;
        fbreak;
    };

    '-@' => {
        Lexer.EmitToken(kUMINUS, ts, te);
        Lexer.CurrentState = Lexer.ArgState;
        fbreak;
    };

    '~' '@'? => {
        Lexer.EmitToken(kNEG, ts, te);
        Lexer.CurrentState = Lexer.ArgState;
        fbreak;
    };

    '[]=' => {
        Lexer.EmitToken(kASET, ts, te);
        Lexer.CurrentState = Lexer.ArgState;
        fbreak;
    };

    '[]' => {
        Lexer.EmitToken(kAREF, ts, te);
        Lexer.CurrentState = Lexer.ArgState;
        fbreak;
    };

    '%' ^'=' => {
        Lexer.EmitToken(kPERCENT, ts, te - 1);
        Lexer.CurrentState = Lexer.BegState;
        fhold;
        fbreak;
    };

    name [!?] ^'=' => {
        EmitFidToken();
        fhold;
        fbreak;
    };

    constant => {
        EmitConstantToken();
        fbreak;
    };

    identifier => {
        EmitIdentifierToken();
        fbreak;
    };

    any => CallBaseState;

*|;

}%%
#pragma warning disable 162

using Mint.Parse;
using static Mint.Parse.TokenType;

namespace Mint.Lex.States
{
    internal class Dot : Shared
    {
        protected override State OperatorState => Lexer.ArgState;

        public Dot(Lexer lexer) : base(lexer)
        { }

        protected override void EmitIdentifierToken()
        {
            Lexer.EmitToken(tIDENTIFIER, ts, te);
            Lexer.CurrentState = Lexer.CommandStart ? Lexer.CmdargState : Lexer.ArgState;
        }

        protected override void EmitFidToken()
        {
            Lexer.EmitToken(tFID, ts, te - 1);
            Lexer.CurrentState = Lexer.CommandStart ? Lexer.CmdargState : Lexer.ArgState;
        }

        protected override void EmitDoToken()
        {
            throw new System.MethodAccessException("Dot state has no keywords.");
        }

        protected override void EmitLeftBracket()
        {
            Lexer.EmitToken(kLBRACK2, ts, te);
            Lexer.CurrentState = OperatorState;
            Lexer.CanLabel = true;
            Lexer.ParenNest++;
        }

        public override void Advance()
        {
            Reset(%%{ write start; }%%);

            %% write exec noend;
        }

        %% write data nofinal noerror;
    }
}