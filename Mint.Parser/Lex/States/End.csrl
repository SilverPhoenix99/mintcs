%%{
# newline significant, +/- is an operator. can label.

machine Lexer;

include "definitions.csrl";

main := |*

    nl ws* ('&.' | '.' ^'.') => {
        fexec te - 2;
    };

    nl => {
        Lexer.EmitToken(kNL, ts, te);
        Lexer.CurrentState = Lexer.BegState;
        Lexer.CommandStart = true;
        fbreak;
    };

    ':' ^':' => {
        Lexer.EmitToken(kCOLON, ts, te - 1);
        Lexer.CurrentState = Lexer.BegState;
        fhold;
        fbreak;
    };

    '?' => {
        Lexer.EmitToken(kQMARK, ts, te);
        Lexer.CurrentState = Lexer.BegState;
        fbreak;
    };

    any => CallBaseState;

*|;

}%%
#pragma warning disable 162

using static Mint.Parse.TokenType;

namespace Mint.Lex.States
{
    internal partial class End
    {
        public override void Advance()
        {
            Reset(%%{ write start; }%%);

            %% write exec noend;
        }

        %% write data nofinal noerror;
    }
}