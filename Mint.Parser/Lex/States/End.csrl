%%{
# newline significant, +/- is an operator. can label.

machine Lexer;

include "definitions.csrl";

EXPR_END := |*

    nl ws* ('&.' | '.' ^'.') => {
        fexec te - 2;
    };

    nl => {
        Lexer.EmitToken(kNL, ts, te);
        Lexer.CurrentState = Lexer.BegState;
        Lexer.CommandStart = true;
        fbreak;
    };

    ':' ^':' => {
        Lexer.EmitToken(kCOLON, ts, te - 1);
        Lexer.CurrentState = Lexer.BegState;
        fhold;
        fbreak;
    };

    '{' => {
        Lexer.CurrentState = Lexer.BegState;
        TokenType tokenType;
        if(Lexer.LeftParenCounter > 0 && Lexer.LeftParenCounter == Lexer.ParenNest)
        {
            tokenType = kLAMBEG;
            Lexer.LeftParenCounter = 0;
            Lexer.ParenNest--;
        }
        else
        {
            tokenType = kLBRACE2;
            Lexer.CanLabel = true;
            Lexer.CommandStart = true;
        }
        Lexer.EmitToken(tokenType, ts, te);
        Lexer.IncrementBraceCount();
        Lexer.Cond.Push(false);
        Lexer.Cmdarg.Push(false);
        fbreak;
    };

    '?' => {
        Lexer.EmitToken(kQMARK, ts, te);
        Lexer.CurrentState = Lexer.BegState;
        fbreak;
    };

    'do' => {
        var tokenType = kDO;

        if(Lexer.LeftParenCounter > 0 && Lexer.LeftParenCounter == Lexer.ParenNest)
        {
            Lexer.LeftParenCounter = 0;
            Lexer.ParenNest--;
            tokenType = kDO_LAMBDA;
        }
        else if(Lexer.Cond.Peek)
        {
            tokenType = kDO_COND;
        }
        else if(Lexer.Cmdarg.Peek)
        {
            tokenType = kDO_BLOCK;
        }

        Lexer.EmitToken(tokenType, ts, te);
        Lexer.CurrentState = Lexer.BegState;
        Lexer.CommandStart = true;
        fbreak;
    };

    any => CallSharedState;

*|;

}%%
#pragma warning disable 162

using Mint.Parse;
using static Mint.Parse.TokenType;

namespace Mint.Lex.States
{
    internal class End : StateBase
    {
        public override bool CanLabel => Lexer.CanLabel && !Lexer.CommandStart;

        protected override int InitialState => %%{ write start; }%%;

        public End(Lexer lexer) : base(lexer)
        { }

        public override void EmitIdentifierToken(int ts, int te)
        {
            var token = Lexer.EmitToken(tIDENTIFIER, ts, te);
            Lexer.CurrentState = Lexer.EndState;
            var isLocalVar = Lexer.IsVariableDefined(token.Value);
            if(isLocalVar)
            {
                Lexer.CanLabel = true;
            }
        }

        public override void EmitFidToken(int ts, int te)
        {
            Lexer.EmitToken(tFID, ts, te);
            Lexer.CurrentState = Lexer.CommandStart ? Lexer.CmdargState : Lexer.ArgState;
        }

        protected override void InternalAdvance()
        {
            %% write exec noend;
        }

        %% write data nofinal noerror;
    }
}