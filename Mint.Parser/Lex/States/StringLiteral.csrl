%%{
# String literals with no interpolation.

machine Lexer;

include "definitions.csrl";

action EofLiteralError
{
    throw new SyntaxError(Lexer.Filename, Lexer.LineAt(ts), "unterminated string meets end of file");
}

action CanLabel { CanLabel }

action LabelDelimiter
{
    // only ', " and ` can be used for labels

    Lexer.EmitStringContentToken(ts, te - 3);
    Lexer.EmitStringEndToken(te - 3, te - 1);
    Lexer.CurrentState = EndState;
    fhold;
    fbreak;
}

action StringDelimiter
{
    Delimiter.DecrementNesting();

    if(!Delimiter.IsNested)
    {
        Lexer.EmitStringContentToken(ts, te - 1);
        Lexer.EmitStringEndToken(te - 1, te);
        Lexer.CurrentState = EndState;

        if(Delimiter.CanJump && Lexer.LineJump > Lexer.Position)
        {
            fexec te = Lexer.LineJump;
            ts = Lexer.Position;
        }

        fbreak;
    }
}

action StringDelimiterEscape
{
    if(Delimiter.CanJump && Lexer.LineJump > Lexer.Position)
    {
        Lexer.EmitStringContentToken(ts, te);
        fexec te = Lexer.LineJump;
        ts = Lexer.Position;
    }
}

action StringNewLine
{
    if(Lexer.LineJump > Lexer.Position)
    {
        Lexer.EmitStringContentToken(ts, te);
        fexec te = Lexer.LineJump;
        ts = Lexer.Position;
    }
}

action StringNesting
{
	Delimiter.IncrementNesting();
}


# ^D (0x4) isn't used by the lexer.
# The real string delimiter is replaced by ^D to generalize string content.
string_delimiter = 0x4;


main := |*

    c_eof => EofLiteralError;

    # only ', " and ` can be used for labels
    string_delimiter ':' ^':' when CanLabel => LabelDelimiter;

    string_delimiter => StringDelimiter;

    '\\' string_delimiter => StringDelimiterEscape;

    '\n' => StringNewLine;

    [\[{(<] => StringNesting;

    any;

*|;

}%%
#pragma warning disable 162

using Mint.Parse;
using static Mint.Parse.TokenType;

namespace Mint.Lex.States
{
    internal partial class StringLiteral
    {
        public override void Advance()
        {
            Reset(%%{ write start; }%%);

            %% write exec noend;
        }

        %% write data nofinal noerror;
    }
}