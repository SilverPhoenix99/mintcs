%%{
# ignore newline, no reserved words.

machine Lexer;

include "definitions.csrl";

main := |*

    '!@' => {
        Lexer.EmitToken(kNOTOP, ts, te);
        Lexer.CurrentState = Lexer.ArgState;
        fbreak;
    };

    heredoc_identifier => {
        Lexer.EmitHeredocToken(ts, te);
        fexec Lexer.NextLinePosition();
        fbreak;
    };

    '`' => {
        Lexer.EmitToken(kBACKTICK, ts, te);
        Lexer.CurrentState = Lexer.EndfnState;
        fbreak;
    };

    '+@' => {
        Lexer.EmitToken(kUPLUS, ts, te);
        Lexer.CurrentState = Lexer.ArgState;
        fbreak;
    };

    '-@' => {
        Lexer.EmitToken(kUMINUS, ts, te);
        Lexer.CurrentState = Lexer.ArgState;
        fbreak;
    };

    '~' '@'? => {
        Lexer.EmitToken(kNEG, ts, te);
        Lexer.CurrentState = Lexer.ArgState;
        fbreak;
    };

    '[]=' => {
        Lexer.EmitToken(kASET, ts, te);
        Lexer.CurrentState = Lexer.ArgState;
        fbreak;
    };

    '[]' => {
        Lexer.EmitToken(kAREF, ts, te);
        Lexer.CurrentState = Lexer.ArgState;
        fbreak;
    };

    '%' ^'=' => {
        Lexer.EmitToken(kPERCENT, ts, te - 1);
        Lexer.CurrentState = Lexer.BegState;
        fhold;
        fbreak;
    };

    name '=' ^[=~>] => {
        Lexer.EmitToken(tIDENTIFIER, ts, te - 1);
        Lexer.CurrentState = Lexer.EndfnState;
        fhold;
        fbreak;
    };

    name '==>' => {
        Lexer.EmitToken(tIDENTIFIER, ts, te - 2);
        Lexer.CurrentState = Lexer.EndfnState;
        fexec te - 2;
        fbreak;
    };

    any => CallBaseState;

*|;

}%%
#pragma warning disable 162

using static Mint.Parse.TokenType;

namespace Mint.Lex.States
{
    internal partial class Fname
    {
        public override void Advance()
        {
            Reset(%%{ write start; }%%);

            %% write exec;
        }

        %% write data nofinal noerror;
    }
}