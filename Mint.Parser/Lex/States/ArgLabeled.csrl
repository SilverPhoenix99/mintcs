%%{
# newline significant, +/- is an operator.  just after a label.

machine Lexer;

include "definitions.csrl";

EXPR_ARG_LABELED := |*

    nl => {
        if(Lexer.InKwarg)
        {
            Lexer.EmitToken(kNL, ts, te);
            Lexer.CurrentState = Lexer.BegState;
            Lexer.CommandStart = true;
            return null;
        }
    };

    esc_ws_nl+ '**' ^(ws_nl | '=') => {
        Lexer.EmitToken(kDSTAR, te - 3, te - 1);
        Lexer.CurrentState = Lexer.BegState;
        fhold;
        return null;
    };

    '**' ^'=' => {
        Lexer.EmitToken(kDSTAR, ts, te - 1);
        Lexer.CurrentState = Lexer.BegState;
        fhold;
        return null;
    };

    esc_ws_nl+ '*' ^(ws_nl | '=') => {
        Lexer.EmitToken(kSTAR, te - 2, te - 1);
        Lexer.CurrentState = Lexer.BegState;
        fhold;
        return null;
    };

    '*' ^'=' => {
        Lexer.EmitToken(kSTAR, ts, te - 1);
        Lexer.CurrentState = Lexer.BegState;
        fhold;
        return null;
    };

    heredoc_identifier => {
        Lexer.EmitHeredocToken(ts, te);
        return null;
    };

    [''""] => {
        Lexer.EmitLabelableStringToken(ts, te);
        return null;
    };

    esc_ws_nl+ '&' ^(ws_nl | [=&.]) => {
        Lexer.EmitToken(kAMPER, te - 2, te - 1);
        Lexer.CurrentState = Lexer.BegState;
        fhold;
        return null;
    };

    '&' ^[=&.] => {
        Lexer.EmitToken(kAMPER, ts, te - 1);
        Lexer.CurrentState = Lexer.BegState;
        fhold;
        return null;
    };

    esc_ws_nl+ %TokStart '+' integer_number => {
        Lexer.EmitIntegerToken(tokStart, te, numBase, isRational, isImaginary);
        Lexer.CurrentState = Lexer.BegState;
        return null;
    };

    esc_ws_nl+ %TokStart '+' float_number => {
        Lexer.EmitFloatToken(tokStart, te, isRational, isImaginary);
        Lexer.CurrentState = Lexer.BegState;
        return null;
    };

    esc_ws_nl+ '+' ^(ws_nl | '=') => {
        Lexer.EmitToken(kUPLUS, te - 2, te - 1);
        Lexer.CurrentState = Lexer.BegState;
        fhold;
        return null;
    };

    '+' integer_number => {
        Lexer.EmitIntegerToken(ts, te, numBase, isRational, isImaginary);
        Lexer.CurrentState = Lexer.BegState;
        return null;
    };

    '+' float_number => {
        Lexer.EmitFloatToken(ts, te, isRational, isImaginary);
        Lexer.CurrentState = Lexer.BegState;
        return null;
    };

    '+' ^'=' => {
        Lexer.EmitToken(kUPLUS, ts, te - 1);
        Lexer.CurrentState = Lexer.BegState;
        fhold;
        return null;
    };

    esc_ws_nl+ '-' digit => {
        Lexer.EmitToken(kUMINUS_NUM, te - 2, te - 1);
        Lexer.CurrentState = Lexer.BegState;
        fhold;
        return null;
    };

    esc_ws_nl+ '-' ^(ws_nl | digit | [=>]) => {
        Lexer.EmitToken(kUMINUS, te - 2, te - 1);
        Lexer.CurrentState = Lexer.BegState;
        fhold;
        return null;
    };

    '-' digit => {
        Lexer.EmitToken(kUMINUS_NUM, ts, te);
        Lexer.CurrentState = Lexer.BegState;
        fhold;
        return null;
    };

    '-' ^(ws_nl | [=>]) => {
        Lexer.EmitToken(kUMINUS, ts, te - 1);
        Lexer.CurrentState = Lexer.BegState;
        fhold;
        return null;
    };

    esc_ws_nl+ '::' => {
        Lexer.EmitToken(kCOLON3, te - 2, te);
        Lexer.CurrentState = Lexer.BegState;
        fhold;
        return null;
    };

    '::' => {
        Lexer.EmitToken(kCOLON3, ts, te);
        Lexer.CurrentState = Lexer.BegState;
        return null;
    };

    esc_ws_nl+ '/' ^(ws_nl | '=') => {
        Lexer.EmitStringToken(te - 2, te - 1);
        fhold;
        return null;
    };

    '/' => {
        Lexer.EmitStringToken(ts, te);
        return null;
    };

    esc_ws_nl+ '(' => {
        Lexer.EmitToken(kLPAREN_ARG, te - 1, te);
        Lexer.CurrentState = Lexer.BegState;
        Lexer.CanLabel = true;
        Lexer.ParenNest++;
        Lexer.Cond.Push(false);
        Lexer.Cmdarg.Push(false);
        return null;
    };

    '(' => {
        Lexer.EmitToken(kLPAREN, ts, te);
        Lexer.CurrentState = Lexer.BegState;
        Lexer.CanLabel = true;
        Lexer.ParenNest++;
        Lexer.Cond.Push(false);
        Lexer.Cmdarg.Push(false);
        return null;
    };

    esc_ws_nl+ '[' => {
        Lexer.EmitToken(kLBRACK, te - 1, te);
        Lexer.CurrentState = Lexer.BegState;
        Lexer.CanLabel = true;
        Lexer.ParenNest++;
        Lexer.Cond.Push(false);
        Lexer.Cmdarg.Push(false);
        return null;
    };

    '[' => {
        Lexer.EmitToken(kLBRACK, ts, te);
        Lexer.CurrentState = Lexer.BegState;
        Lexer.CanLabel = true;
        Lexer.ParenNest++;
        Lexer.Cond.Push(false);
        Lexer.Cmdarg.Push(false);
        return null;
    };

    '%' [Qqxr] (ascii - alnum) => {
        Lexer.EmitStringToken(ts, te);
        return null;
    };

    '%s' (ascii - alnum) => {
        Lexer.EmitStringToken(ts, te);
        Lexer.CurrentState = Lexer.FnameFitemState;
        return null;
    };

    '%' [WwIi] (ascii - alnum) ws_nl* => {
        Lexer.EmitStringToken(ts, ts + 3);
        return null;
    };

    '%' (ascii - alnum) => {
        Lexer.EmitStringToken(ts, te);
        return null;
    };

    '%' [QqWwIixrs]? c_eof => {
        var line = Lexer.LocationFor(ts, 0).StartLine;
        throw new SyntaxError(Lexer.Filename, line, "unterminated quoted string meets end of file");
    };

    '%' [QqWwIixrs]? (unicode | alnum) => {
        var line = Lexer.LocationFor(ts, 0).StartLine;
        throw new SyntaxError(Lexer.Filename, line, "unknown type of %string");
    };

    '?' ws_nl => {
        Lexer.EmitToken(kQMARK, ts, te - 1);
        Lexer.CurrentState = Lexer.BegState;
        fhold;
        return null;
    };

    any => {
        fhold;
        return Lexer.SharedState.Advance(this);
    };

*|;

}%%
#pragma warning disable 162

using Mint.Parse;
using static Mint.Parse.TokenType;

namespace Mint.Lex.States
{
    internal class ArgLabeled : StateBase
    {
        public ArgLabeled(Lexer lexer) : base(lexer)
        { }

        public override State Advance(State caller)
        {
            Reset(Lexer_start);

            %% write exec;

            return null;
        }

        %% write data;
    }
}