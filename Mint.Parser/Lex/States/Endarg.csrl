%%{
# newline significant, +/- is an operator., and unbound braces.

machine Lexer;

include "definitions.csrl";

EXPR_ENDARG := |*

    nl ws* ('&.' | '.' ^'.') => {
        fexec te - 2;
    };

    nl => {
        Lexer.EmitToken(kNL, ts, te);
        Lexer.CurrentState = Lexer.BegState;
        Lexer.CommandStart = true;
        fbreak;
    };

    ':' ^':' => {
        Lexer.EmitToken(kCOLON, ts, te - 1);
        Lexer.CurrentState = Lexer.BegState;
        fhold;
        fbreak;
    };

    '{' => {
        TokenType tokenType;
        if(Lexer.LeftParenCounter > 0 && Lexer.LeftParenCounter == Lexer.ParenNest)
        {
            tokenType = kLAMBEG;
            Lexer.LeftParenCounter = 0;
            Lexer.ParenNest--;
        }
        else
        {
            tokenType = kLBRACE_ARG;
            Lexer.CommandStart = true;
        }
        Lexer.EmitToken(tokenType, ts, te);
        Lexer.CurrentState = Lexer.BegState;
        Lexer.IncrementBraceCount();
        Lexer.Cond.Push(false);
        Lexer.Cmdarg.Push(false);
        fbreak;
    };

    '?' => {
        Lexer.EmitToken(kQMARK, ts, te);
        Lexer.CurrentState = Lexer.BegState;
        fbreak;
    };

    (name [!?] - reserved) ^'=' => {
        Lexer.EmitToken(tFID, ts, te - 1);
        Lexer.CurrentState = Lexer.EndState;
        fhold;
        fbreak;
    };

    constant - reserved => {
        Lexer.EmitToken(tCONSTANT, ts, te);
        Lexer.CurrentState = Lexer.EndState;
        fbreak;
    };

    identifier - reserved => {
        var token = Lexer.EmitToken(tIDENTIFIER, ts, te);
        Lexer.CurrentState = Lexer.EndState;
        var isLocalVar = Lexer.IsVariableDefined(token.Value);
        if(isLocalVar)
        {
            Lexer.CanLabel = true;
        }
        fbreak;
    };

    'and' => {
        Lexer.EmitToken(kAND, ts, te);
        Lexer.CurrentState = Lexer.BegState;
        Lexer.CommandStart = true;
        fbreak;
    };

    'begin' => {
        Lexer.EmitToken(kBEGIN, ts, te);
        Lexer.CurrentState = Lexer.BegState;
        Lexer.CommandStart = true;
        fbreak;
    };

    'case' => {
        Lexer.EmitToken(kCASE, ts, te);
        Lexer.CurrentState = Lexer.BegState;
        Lexer.CommandStart = true;
        fbreak;
    };

    'else' => {
        Lexer.EmitToken(kELSE, ts, te);
        Lexer.CurrentState = Lexer.BegState;
        Lexer.CommandStart = true;
        fbreak;
    };

    'elsif' => {
        Lexer.EmitToken(kELSIF, ts, te);
        Lexer.CurrentState = Lexer.BegState;
        Lexer.CommandStart = true;
        fbreak;
    };

    'ensure' => {
        Lexer.EmitToken(kENSURE, ts, te);
        Lexer.CurrentState = Lexer.BegState;
        Lexer.CommandStart = true;
        fbreak;
    };

    'for' => {
        Lexer.EmitToken(kFOR, ts, te);
        Lexer.CurrentState = Lexer.BegState;
        Lexer.CommandStart = true;
        fbreak;
    };

    'if' => {
        Lexer.EmitToken(kIF_MOD, ts, te);
        Lexer.CurrentState = Lexer.BegState;
        Lexer.CanLabel = true;
        Lexer.CommandStart = true;
        fbreak;
    };

    'in' => {
        Lexer.EmitToken(kIN, ts, te);
        Lexer.CurrentState = Lexer.BegState;
        Lexer.CommandStart = true;
        fbreak;
    };

    'module' => {
        Lexer.EmitToken(kMODULE, ts, te);
        Lexer.CurrentState = Lexer.BegState;
        Lexer.CommandStart = true;
        fbreak;
    };

    'or' => {
        Lexer.EmitToken(kOR, ts, te);
        Lexer.CurrentState = Lexer.BegState;
        Lexer.CommandStart = true;
        fbreak;
    };

    'then' => {
        Lexer.EmitToken(kTHEN, ts, te);
        Lexer.CurrentState = Lexer.BegState;
        Lexer.CommandStart = true;
        fbreak;
    };

    'unless' => {
        Lexer.EmitToken(kUNLESS_MOD, ts, te);
        Lexer.CurrentState = Lexer.BegState;
        Lexer.CanLabel = true;
        Lexer.CommandStart = true;
        fbreak;
    };

    'until' => {
        Lexer.EmitToken(kUNTIL_MOD, ts, te);
        Lexer.CurrentState = Lexer.BegState;
        Lexer.CanLabel = true;
        Lexer.CommandStart = true;
        fbreak;
    };

    'when' => {
        Lexer.EmitToken(kWHEN, ts, te);
        Lexer.CurrentState = Lexer.BegState;
        Lexer.CommandStart = true;
        fbreak;
    };

    'while' => {
        Lexer.EmitToken(kWHILE_MOD, ts, te);
        Lexer.CurrentState = Lexer.BegState;
        Lexer.CanLabel = true;
        Lexer.CommandStart = true;
        fbreak;
    };

    'rescue' => {
        Lexer.EmitToken(kRESCUE_MOD, ts, te);
        Lexer.CurrentState = Lexer.BegState;
        Lexer.CanLabel = true;
        fbreak;
    };

    'do' => {
        var tokenType = kDO_BLOCK;

        if(Lexer.LeftParenCounter > 0 && Lexer.LeftParenCounter == Lexer.ParenNest)
        {
            Lexer.LeftParenCounter = 0;
            Lexer.ParenNest--;
            tokenType = kDO_LAMBDA;
        }
        else if(Lexer.Cond.Peek)
        {
            tokenType = kDO_COND;
        }

        Lexer.EmitToken(tokenType, ts, te);
        Lexer.CurrentState = Lexer.BegState;
        Lexer.CommandStart = true;
        fbreak;
    };

    any => CallSharedState;

*|;

}%%
#pragma warning disable 162

using Mint.Parse;
using static Mint.Parse.TokenType;

namespace Mint.Lex.States
{
    internal class Endarg : StateBase
    {
        public Endarg(Lexer lexer) : base(lexer)
        { }

        public override void Advance(State caller)
        {
            Reset(%%{ write start; }%%);

            %% write exec noend;
        }

        %% write data nofinal noerror;
    }
}